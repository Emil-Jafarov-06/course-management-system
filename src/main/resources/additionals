üîê User-related

    List all users (admin-only):

@PreAuthorize("hasRole('ADMIN')")
@GetMapping("/all")
public ResponseEntity<List<UserDTO>> getAllUsers()

Change password endpoint (separate from username/email update for better security):

@PutMapping("/myAccount/password")
public ResponseEntity<?> updatePassword(@RequestBody PasswordUpdateRequest request)

Ban or deactivate user (admin-only):

    @PreAuthorize("hasRole('ADMIN')")
    @PutMapping("/{id}/deactivate")
    public ResponseEntity<?> deactivateUser(@PathVariable Long id)

üìö Course-related

    Get all courses (public):

@GetMapping("/all")
public ResponseEntity<List<CourseDTO>> getAllCourses()

Delete a course (teacher-only):

@PreAuthorize("hasRole('TEACHER')")
@DeleteMapping("/course/{id}")
public ResponseEntity<?> deleteCourse(@PathVariable Long id)

Get enrolled students (teacher-only):

    @PreAuthorize("hasRole('TEACHER')")
    @GetMapping("/course/{id}/students")
    public ResponseEntity<List<UserDTO>> getEnrolledStudents(@PathVariable Long id)

üìñ Lesson-related

    List all lessons for a course:

    @GetMapping("/course/{id}/lessons")
    public ResponseEntity<List<LessonDTO>> getLessons(@PathVariable Long id)

    ‚úÖ You already have: create, update, and delete lesson endpoints, good job.

‚ùì Quiz-related

    Get all quizzes for a lesson:

@GetMapping("/lesson/{lessonId}/quizzes")
public ResponseEntity<List<QuizDTO>> getQuizzesByLesson(@PathVariable Long lessonId)

Delete quiz (teacher-only):

@PreAuthorize("hasRole('TEACHER')")
@DeleteMapping("/{id}")
public ResponseEntity<?> deleteQuiz(@PathVariable Long id)

Update quiz title/duration/etc.:

    @PutMapping("/{id}")
    public ResponseEntity<QuizDTO> updateQuiz(@PathVariable Long id, @RequestBody QuizUpdateRequest request)

‚ùî Question-related

    List all questions for a quiz:

@GetMapping("/quiz/{quizId}/questions")
public ResponseEntity<List<QuestionDTO>> getQuestionsByQuiz(@PathVariable Long quizId)